I"Å<p>TODO: Potentially make the instructions even more clearer, and less of a mess then they are right now</p>

<p>Signing on a separate machine:</p>
<ul>
  <li>If keys aren‚Äôt already generated, use <code class="language-plaintext highlighter-rouge">./vendor/calyx/scripts/mkkeys.sh</code> to create them. Don‚Äôt forget to copy verity_user.der.x509 to the kernel source before building, for marlin/sailfish/jasmine.</li>
  <li>Install zip, openssl</li>
  <li>Build normally</li>
  <li><code class="language-plaintext highlighter-rouge">make target-files-package otatools-package</code></li>
  <li>Copy otatools.zip (common, $OUT/otatools.zip) and the target-files-package ($OUT/obj/PACKAGING/target_files_intermediates/calyx_$device-target_files-$BUILD_NUMBER.zip) for each device to signing machine</li>
  <li><code class="language-plaintext highlighter-rouge">export BUILD_NUMBER=</code> (example build number: 2018.12.14.17)</li>
  <li>Unzip otatools.zip, run <code class="language-plaintext highlighter-rouge">./vendor/calyx/scripts/release.sh ${device} calyx_${device}-target_files-${BUILD_NUMBER}.zip</code></li>
  <li>Generate server metadata with <code class="language-plaintext highlighter-rouge">./vendor/calyx/scripts/generate_metadata.py out/release-${device}-${BUILD_NUMBER}/${device}-ota_update_${BUILD_NUMBER}.zip</code>
Optional:</li>
  <li>Generate incremental zips by running <code class="language-plaintext highlighter-rouge">./vendor/calyx/scripts/generate_delta.sh ${device} ${OLD_BUILD_NUMBER} ${BUILD_NUMBER}</code></li>
</ul>

<p>Note:</p>
<ul>
  <li>keys are currently common amongst devices, can be made per device if needed. Will depend on future direction with HSM and their capacity.</li>
  <li>The signing process can also be run on the same host building, using the same scripts.</li>
</ul>

<p>References:</p>
<ul>
  <li>https://source.android.com/devices/tech/ota/sign_builds</li>
</ul>
:ET