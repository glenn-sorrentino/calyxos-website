I"g<p>We have a Gerrit Code Review Instance now at <a href="https://review.calyxos.org/">https://review.calyxos.org/</a></p>

<p>Gerrit makes a lot easier to deal with hundreds of repositories in one place, and also for dealing with changes involving multiple repos.</p>

<p><br /></p>

<h3 id="getting-started">Getting Started</h3>
<ol>
  <li>Visit <a href="https://review.calyxos.org/">https://review.calyxos.org/</a> - and click Sign in. That will take you to GitHub, where you can approve the request to sign in. (GitLab oauth plugin was broken at time of deploy)</li>
  <li>Go to <a href="https://review.calyxos.org/settings/#Profile">https://review.calyxos.org/settings/#Profile</a> - and set a Display Name, and note down your username (will be the same as your GitHub username)</li>
  <li>Scroll down to <a href="https://review.calyxos.org/settings/#EmailAddresses">https://review.calyxos.org/settings/#EmailAddresses</a> - and add an email address or two. You will need to verify them by clicking on a link sent to the particular email.</li>
  <li>Scroll down to <a href="https://review.calyxos.org/settings/#SSHKeys">https://review.calyxos.org/settings/#SSHKeys</a> - and add an SSH key. This is what you will use to push code changes to Gerrit.</li>
  <li>Add your Gerrit/GitHub username to gitconfig - <code class="language-plaintext highlighter-rouge">git config --add --global review.review.calyxos.org.username $USERNAME</code> - the double review in review.review. is intentional</li>
</ol>

<h3 id="workflow">Workflow:</h3>

<ul>
  <li>This is divided into two parts, one for those working on the AOSP / CalyxOS code, and another for any other supporting repositories</li>
  <li>The repositories are still to be cloned via GitLab just like before - use <code class="language-plaintext highlighter-rouge">https://gitlab.com/CalyxOS/$projectname</code></li>
</ul>

<h4 id="calyxos">CalyxOS:</h4>
<ul>
  <li>If you had the source code synced before October, you should download the files ‘old-new’ and ‘repo.sh’ from <a href="https://git.io/JUb6h">https://git.io/JUb6h</a> to your checkout (where you ran repo init / sync) - and then run repo.sh</li>
  <li>For new checkouts, it will work out of the box</li>
  <li>You can use the <code class="language-plaintext highlighter-rouge">repo upload</code> tool to upload changes.</li>
  <li>You can use the <code class="language-plaintext highlighter-rouge">repopick</code> tool, available after <code class="language-plaintext highlighter-rouge">source envsetup.sh</code> - to quickly download changes from gerrit.</li>
</ul>

<h4 id="calyx">Calyx:</h4>
<ul>
  <li>We use a tool called ‘git-review’ for these repos, available from <a href="https://docs.openstack.org/infra/git-review/">https://docs.openstack.org/infra/git-review/</a></li>
  <li>This is configured by a ‘.gitreview’ file in the root of the repo, which has already been added to all the relevant repos</li>
  <li>Make your changes, and then simply run <code class="language-plaintext highlighter-rouge">git review</code> to upload them to gerrit.</li>
</ul>

<h3 id="common">Common:</h3>
<ul>
  <li>Open Changes can be viewed on the main gerrit homepage - <a href="https://review.calyxos.org/">https://review.calyxos.org/</a></li>
</ul>

<h4 id="change-id">Change-Id</h4>
<ul>
  <li>Gerrit tracks changes using Change-Ids, which will automatically be added to your commit messages with a hook.</li>
  <li>Change-Ids are unique per-project per-branch, so you can share the Change-Id across projects (for one patch affecting multiple repos), or across branches (porting a previous feature) to keep things easier to track</li>
  <li>Change-Ids are also how it knows whether to update an existing change, or create a new change</li>
</ul>

<h4 id="review">Review</h4>
<ul>
  <li>You can ask for review using the “Add Review” button on the left.</li>
  <li>You can leave comments on individual files and even the commit message, and hit Reply to Submit</li>
  <li>Reply also has options to set a score.</li>
  <li>Code-Review is used to review the code. +1/-1 are like thumbs up / down. +2 is needed to merge a change, and -2 prevents a change from being merged.</li>
  <li>Verified is used to indicate if the code builds. We’ll have CI for this later, but for now you can mark stuff you compiled as +1, and -1 if it’s WiP / doesn’t compile yet.</li>
  <li>Setting Verified+1 and Code-Review+1 on your own changes that you want reviewed / merged is good practice.</li>
  <li>Once a change has at least one Verified +1 and Code-Review +2, it can be submitted using the “Submit” button which then appears.</li>
  <li>A change can also be abandoned.</li>
</ul>

<h4 id="topics">Topics</h4>
<ul>
  <li>Topics are another way to group changes together, and super useful with something like <code class="language-plaintext highlighter-rouge">repopick -t $topic</code> to be able to pick a set of changes easily.</li>
</ul>

<h3 id="useful-links">Useful Links:</h3>
<ul>
  <li><a href="https://gerrit-review.googlesource.com/Documentation/intro-gerrit-walkthrough-github.html">https://gerrit-review.googlesource.com/Documentation/intro-gerrit-walkthrough-github.html</a></li>
</ul>
:ET